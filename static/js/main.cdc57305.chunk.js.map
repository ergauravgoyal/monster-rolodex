{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","name","id","email","className","alt","src","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handleSearchChange","e","setState","searchedString","target","value","state","updatedResult","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAiBeA,EAdF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACNC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,GAAIC,EAAUH,EAAVG,MAClB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAKJ,EACLK,IAAG,+BAA0BJ,EAA1B,4BAEL,6BAAKD,IACL,4BAAIE,QCRGI,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKJ,UAAU,YAAf,SACGI,EAASC,KAAI,SAACT,GACb,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQE,WCMnBQ,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACEC,KAAK,OACLT,UAAU,SACVO,YAAaA,EACbG,SAAUF,MCmDDG,E,kDAtDb,aAAe,IAAD,8BACZ,gBAiCFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEC,eAAgBF,EAAEG,OAAOC,SAjCzC,EAAKC,MAAQ,CACXd,SAAU,GACVW,eAAgB,GAChBI,cAAe,IALL,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKV,SAAS,CAAEV,SAAUoB,S,oBAuBhC,WAAU,IAAD,EAC8BC,KAAKP,MAAlCH,EADD,EACCA,eACFW,EAFC,EACiBtB,SACUuB,QAAO,SAAC/B,GACxC,OAAOA,EAAQC,KAAK+B,cAAcC,SAASd,EAAea,kBAE5D,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEO,YAAY,kBACZC,aAAciB,KAAKb,qBAErB,cAAC,EAAD,CAAUR,SAAUsB,W,GAlDVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cdc57305.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nconst Card = ({ monster }) => {\r\n  const { name, id, email } = monster;\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt={name}\r\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => {\r\n        return <Card key={monster.id} monster={monster} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchedString: \"\",\n      updatedResult: [],\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ monsters: users });\n      });\n  }\n  /**\n   * \n   *  handleSearch = (e) => {\n    debugger;\n    const { monsters } = this.state;\n    let filteredResults = [];\n\n    filteredResults = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(e.target.value.toLowerCase());\n    });\n    this.setState({\n      updatedResult: filteredResults,\n    });\n    debugger;\n  };\n   */\n\n  handleSearchChange = (e) => {\n    this.setState({ searchedString: e.target.value });\n  };\n  render() {\n    const { searchedString, monsters } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchedString.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search monsters\"\n          handleChange={this.handleSearchChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}